=== Proponowane kryteria oceniania piątego zadania ===

== Cele dydaktyczne ==

Studenci powinni poznać:
- poziomy odporności na wyjątki;
- schematy pozwalające zapewnić co najmniej silną odporność na wyjątki;
- zarządzanie pamięcią z użyciem sprytnych wskaźników;
- schemat implementowania semantyki kopiowania przy modyfikowaniu.

== Ocena z testów automatycznych ==

Przyznawany jest jeden punkt za przejście wszystkich testów z każdej z sześciu
grup testów. Zarządzanie pamięcią będzie sprawdzane poleceniem

valgrind --error-exitcode=123 --leak-check=full --show-leak-kinds=all --errors-for-leak-kinds=all --run-cxx-freeres=yes -q

== Ocena jakości tekstu źródłowego ==

Zaczynamy od 4 punktów i odejmujemy po jednym punkcie za (przy czym ocena nie
może być ujemna):
- niezgodność zawartości repozytorium ze specyfikacją;
- ostrzeżenia wypisywane przez kompilator;
- brak header guard;
- brzydki styl;
- nieprzejrzysty kod – sprawdzający nie mógł łatwo zrozumieć, dlaczego
  poszczególne funkcje mają dobrą odporność na wyjątki;
- nieprzejrzysty kod – sprawdzający nie mógł łatwo zrozumieć, że na pewno nie
  cieknie pamięć, ewentualnie, gdzie cieknie pamięć;
- nieprzejrzysty kod – sprawdzający nie mógł łatwo zrozumieć, jaką złożoność ma
  dana operacja;
- nieprawidłowe oznaczenie lub brak oznaczenia metod jako noexcept;
- braki const, jeśli nie zostały wykryte przez testy automatyczne;
- nieefektywna implementacja kopiowania przy modyfikowaniu, np. niepotrzebne lub
  zbyt częste kopiowanie;
- niepotrzebne zaśmiecanie globalnej przestrzeni nazw;
- jawne użycie operatora new, np. zamiast użycia std::make_shared;
- niespełnienie innych wymagań z treści zadania niewykryte przez testy
  automatyczne;
- niezastosowanie się do uwag udzielonych przy ocenie poprzednich zadań.
