= Kryteria oceniania pierwszego zadania =

== Cele dydaktyczne ==

Studenci powinni:
- poznać podstawy korzystania z STL-a,
- uświadomić sobie konieczność weryfikacji poprawności danych wejściowych,
- nauczyć się podejmowania decyzji programistycznych,
- ugruntować w sobie konieczność testowania programu.

== Ocena automatyczna ==

Za testy automatyczne zostanie przyznana ocena z przedziału od 0 do 6 punków.
Nie ma punktów ułamkowych.

== Ocena jakości kodu ==

Zaczynamy od 4 punktów i odejmujemy po jednym punkcie za:
- niezgodność zawartości repozytorium ze specyfikacją zadania;
- ostrzeżenia wypisywane przez kompilator (opcje -Wall, -Wextra);
- brzydki styl (niepoprawne wstawianie spacji, wcięć, odstępów, brak
  komentarzy, magiczne stałe itd.);
- dłubanie własnych klas, struktur lub algorytmów zamiast użycia STL-owych;
- rozwlekłą lub nieelegancką strukturę programu, rozpatrywanie zbyt wielu
  warunków brzegowych, powtarzanie kodu, nieefektywne korzystanie z klasy
  string, np. if (str != "") zamiast if (!str.empty()), trzymanie liczb jako
  napisów i używanie w każdym porównaniu komparatora konwertującego napis na
  liczbę itp.;
- korzystanie z wejścia-wyjścia dostarczanego przez bibliotekę C zamiast ze
  strumieni lub dłubanie własnego kodu zamiast użycia np. funkcji getline;
- potencjalne wycieki pamięci albo korzystanie z new i delete;
- zły dobór typów całkowitoliczbowych, np. używanie int lub unsigned zamiast
  size_t jako typu wartości zwracanej przez metody size(), length(), używanie
  int lub long zamiast int32_t, gdy potrzebujemy typu 32-bitowego.
- używanie typu zmiennoprzecinkowego;
- zły wybór kontenera, np. map, gdy wystarczyłby unordered_map;
- wprowadzanie sztucznych ograniczeń na rozmiar danych;
- inne znalezione i niewymienione w powyższych kryteriach błędy.
Przy czym ocena nie może być ujemna.

Dodajemy jeden punkt za skorzystanie z regex do walidowania poprawności danych
wejściowych. Przy czym ocena nie może być wyższa niż 4 pkt.

Ponadto:
- piętnujemy przekazywanie funkcjom dużych argumentów (np. typu string) przez
  wartość, takie obiekty przekazuje się przez stałą referencję;
- wytykamy nieukrywanie globalnych zmiennych, struktur, funkcji przed światem
  zewnętrznym za pomocą anonimowej przestrzeni nazw, choć studenci powinni
  wiedzieć, że można to też osiągnąć podobnie jak w języku C, czyli deklarując
  je jako static;
- sugerujemy stosowanie using zamiast typedef.
Na razie tylko wskazujemy te błędy i nie odejmujemy za nie punktów, bo są to
zagadnienia pojawiające się w drugim zadaniu, w którym już będziemy za to karać.
